# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
trigger:
- main

pool: my-personal-computer

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/Calendara.Api.sln'
  apiProject: '**/Calendara.Api.csproj'
  applicationProject: '**/Calendara.Application.csproj'
  contractsProject: '**/Calendara.Contracts.csproj'
  testProject: '**/Calendara.UnitTests.csproj'

steps:
# 1. Debug info
- script: |
    echo Current directory:
    pwd
    echo Directory contents:
    dir /s /b
  displayName: 'Debug - List Directory Structure'

# 2. .NET SDK Setup
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.404'
    includePreviewVersions: false

# 3. Clear NuGet cache and restore
- script: dotnet nuget locals all --clear
  displayName: 'Clear NuGet Cache'

- task: DotNetCoreCLI@2
  displayName: 'Restore Solution'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'

# 4. Build projects with detailed logging
- task: DotNetCoreCLI@2
  displayName: 'Build Contracts'
  inputs:
    command: 'build'
    projects: '$(contractsProject)'
    arguments: '--configuration $(buildConfiguration) -v:detailed'

- task: DotNetCoreCLI@2
  displayName: 'Build Application'
  inputs:
    command: 'build'
    projects: '$(applicationProject)'
    arguments: '--configuration $(buildConfiguration) -v:detailed'

- task: DotNetCoreCLI@2
  displayName: 'Build API'
  inputs:
    command: 'build'
    projects: '$(apiProject)'
    arguments: '--configuration $(buildConfiguration) -v:detailed'

# 5. Run tests
- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    projects: '$(testProject)'
    arguments: '--configuration $(buildConfiguration)'
    publishTestResults: true

# 6. Publish
- task: DotNetCoreCLI@2
  displayName: 'Publish API'
  inputs:
    command: 'publish'
    projects: '$(apiProject)'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true
